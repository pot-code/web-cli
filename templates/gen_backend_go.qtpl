{% func GoBackendBootstrapCreate(projectName string, author string) -%}
package bootstrap

import (
	"context"
	"log"
	"net/http"
	"os"
	"strings"

	_ "github.com/jackc/pgx/v4/stdlib"
	"github.com/jmoiron/sqlx"
	"github.com/labstack/echo/v4"
	echo_middleware "github.com/labstack/echo/v4/middleware"
	gobit "github.com/pot-code/gobit/pkg"
	"github.com/pot-code/gobit/pkg/api"
	"github.com/pot-code/gobit/pkg/logging"
	"github.com/pot-code/gobit/pkg/middleware"
	"github.com/pot-code/gobit/pkg/util"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

func NewLogger(cfg *AppConfig, lm *util.LifecycleManager) *zap.Logger {
	ec := logging.NewEcsConfig()
	enabler, err := logging.GetLevelEnabler(cfg.Logging.Level)
	util.HandleFatalError("failed to create logger", err)

	var zc zapcore.Encoder
	if cfg.Logging.Format == "json" {
		zc = zapcore.NewJSONEncoder(ec)
	} else {
		zc = zapcore.NewConsoleEncoder(ec)
	}

	var out zapcore.WriteSyncer
	p := cfg.Logging.FilePath
	if p == "" {
		out = os.Stderr
	} else {
		out, err = logging.NewFileSyncer(p)
		if err != nil {
			log.Fatalf("failed to create logger: %s", err)
		}
	}

	core := zapcore.NewCore(zc, out, enabler)
	logger := zap.New(core)

	lm.OnExit(func(ctx context.Context) {
		log.Println("sync zap logger")
		logger.Sync()
	})

	return logger
}

func NewSqlxDB(cfg *AppConfig, logger *zap.Logger, lm *util.LifecycleManager) *sqlx.DB {
	conn, err := sqlx.Connect(cfg.Database.Driver, cfg.Database.Dsn)
	util.HandleFatalError("failed to create DB connection", err)

	conn.DB.SetMaxOpenConns(int(cfg.Database.MaxConn))
	conn.DB.SetMaxIdleConns(int(cfg.Database.MaxConn) >> 2)

	lm.AddLivenessProbe(func(ctx context.Context) error {
		return conn.PingContext(ctx)
	})
	lm.OnExit(func(ctx context.Context) {
		log.Println("close sqlx DB connection")
		conn.Close()
	})

	logger.Debug("connect to database",
		zap.String("db.driver", cfg.Database.Driver),
		zap.String("db.dsn", cfg.Database.Dsn),
		zap.Int32("db.maxconn", cfg.Database.MaxConn),
	)
	return conn
}

// NewEchoServer create http server
func NewEchoServer(cfg *AppConfig, logger *zap.Logger, lm *util.LifecycleManager) *echo.Echo {
	app := echo.New()

	if cfg.Env == gobit.EnvDevelop {
		app.Use(middleware.Logging(middleware.LoggingConfig{
			Skipper: func(e echo.Context) bool {
				return strings.HasPrefix(e.Request().RequestURI, "/healthz")
			},
			LogFn: func(c echo.Context) {
				code := c.Response().Status
				rid := c.Response().Header().Get(echo.HeaderXRequestID)
				logger.Debug(
					http.StatusText(code),
					zap.String("trace.id", rid),
					zap.String("url.original", c.Path()),
					zap.String("http.request.referrer", c.Request().Referer()),
					zap.String("http.request.method", c.Request().Method),
					zap.Strings("route.params.name", c.ParamNames()),
					zap.Strings("route.params.value", c.ParamValues()),
					zap.Int("http.request.status_code", code),
				)
			},
		}))
	}

	if cfg.Env == gobit.EnvProduction {
		app.HideBanner = true
	}

	app.Use(
		middleware.ErrorHandling(middleware.ErrorHandlingOption{Handler: func(c echo.Context, err error) {
			traceID := c.Response().Header().Get(echo.HeaderXRequestID)
			msg := api.ErrInternalError.Error()
			logger.Error(err.Error(), zap.String("trace.id", traceID), zap.Object("detail", logging.NewZapStacktraceError(err, 3)))

			c.JSON(http.StatusInternalServerError,
				api.NewRESTStandardError(msg).SetTraceID(traceID),
			)
		}}),
		echo_middleware.Secure(),
		echo_middleware.RequestID(),
		middleware.ParseAcceptLanguage(middleware.ParseAcceptLanguageOption{}),
	)

	lm.OnExit(func(ctx context.Context) {
		log.Println("shutdown echo server")
		app.Close()
	})

	return app
}
{% endfunc %}


{% func GoBackendBootstrapConfig(projectName string) -%}
package bootstrap

// AppConfig App configuration
type AppConfig struct {
	AppID    string `validate:"required"` // application ID
	Port     string // bind listen port
	Env      string `validate:"oneof=develop production"` // runtime environment
	Database struct {
		Driver  string `validate:"required"` // driver name
		Dsn     string `validate:"required"` // dsn string
		MaxConn int32  `validate:"min=1"`    // maximum opening connections number
	}
	Logging struct {
		FilePath string // log file path
		Level    string // global logging level
		Format   string `validate:"oneof=json console"`
	}
}
{% endfunc %}

{% func GoBackendCmdWeb(projectName string, author string) -%}
package cmd

import (
	"errors"
	"log"
	"net/http"
	"time"

	"github.com/{%s author %}/{%s projectName %}/bootstrap"
	"github.com/{%s author %}/{%s projectName %}/server"
	"github.com/pot-code/gobit/pkg/api"
	"github.com/pot-code/gobit/pkg/util"
	"github.com/pot-code/gobit/pkg/validate"
)

func Serve() {
	cfg := new(bootstrap.AppConfig)
	cm := util.NewConfigManager()
	v := validate.NewValidator()

	if err := cm.LoadConfig(cfg); err != nil {
		log.Fatalf("failed to load config: %s", err)
	}
	if err := v.Struct(cfg, "en"); err != nil {
		log.Fatalf("failed to validate config: \n%s", err)
	}

	lm := util.NewLifecycleManager()
	defer lm.WaitExitSignal(30 * time.Second)

	hs := server.InitHttpServer(cfg, lm)

	server.OnExitRoutes(cfg, hs)
	api.PrintRoutes(hs.Server, hs.Logger)

	go func() {
		if err := hs.Server.Start(cfg.Port); err != nil {
			if !errors.Is(err, http.ErrServerClosed) {
				log.Fatal(err)
			}
		}
	}()
}
{% endfunc %}

{% func GoBackendMain(projectName string, author string) -%}
package main

import "github.com/{%s author %}/{%s projectName %}/cmd"

//go:generate wire ./server
//go:generate go generate ./ent
func main() {
	cmd.Serve()
}
{% endfunc %}

{% func GoBackendMod(projectName string, author string, version string) -%}
module github.com/{%s author %}/{%s projectName %}

go {%s version %}

require (
)
{% endfunc %}

{% func GoBackendServerRoutes(projectName string, author string) -%}
package server

import (
	"github.com/{%s author %}/{%s projectName %}/bootstrap"
	"github.com/pot-code/gobit/pkg/api"
)

func OnExitRoutes(cfg *bootstrap.AppConfig, hs *HttpServer) {
	api.CreateEndpoint(hs.Server,
		&api.Endpoint{
			Prefix: "api",
			Groups: []*api.ApiGroup{},
		})
}
{% endfunc %}

{% func GoBackendServerServer() -%}
package server

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"go.uber.org/zap"
)

type HandlerCollection struct {
}

type HttpServer struct {
	Logger    *zap.Logger
	Server    *echo.Echo
	Handlers  *HandlerCollection
}

func NewHttpServer(logger *zap.Logger, server *echo.Echo, handlers *HandlerCollection) *HttpServer {
	return &HttpServer{Logger: logger, Server: server, Handlers: handlers}
}

var HttpSet = wire.NewSet(
	wire.Struct(new(HandlerCollection), "*"),
)
{% endfunc %}

{% func GoBackendServerWire(projectName string, author string) -%}
//+build wireinject

package server

import (
	"github.com/google/wire"
	"github.com/{%s author %}/{%s projectName %}/bootstrap"
	"github.com/pot-code/gobit/pkg/util"
)

func InitHttpServer(cfg *bootstrap.AppConfig, lm *util.LifecycleManager) *HttpServer {
	wire.Build(
		NewHttpServer, HttpSet,
		bootstrap.NewEchoServer, bootstrap.NewLogger,
	)
	return &HttpServer{}
}
{% endfunc %}

{% func GoBackendVscodeSettings() -%}
{
	"go.inferGopath": false,
	"gopls": {
		"build.buildFlags": [
			"-tags=wireinject"
		]
	},
}
{% endfunc %}

{% func GoBackendDockerfile() -%}
FROM golang:1.16 as builder

WORKDIR /go/src

COPY go.mod .
COPY go.sum .

RUN go mod download

COPY . .
# build prod app
RUN GOARCH=amd64 GOOS=linux CGO_ENABLED=0 go build -ldflags="-s -w" -o app ./cmd

FROM alpine:3.8

WORKDIR /usr/bin/go

COPY --from=builder ["/go/src/app", "./"]

RUN chmod 0755 app

EXPOSE 8081 

CMD [ "./app" ]
{% endfunc %}