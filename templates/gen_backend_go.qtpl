{% func GoBackendCmdHttp(projectName string, author string) -%}
package cmd

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	echo_middleware "github.com/labstack/echo/v4/middleware"
	gobit "github.com/pot-code/gobit/pkg"
	"github.com/pot-code/gobit/pkg/api"
	"github.com/pot-code/gobit/pkg/db"
	"github.com/pot-code/gobit/pkg/logging"
	"github.com/pot-code/gobit/pkg/middleware"
	"github.com/pot-code/gobit/pkg/util"
	"go.uber.org/zap"
	"golang.org/x/text/language"
)

func Http(envPrefix string) {
	option := new(AppConfig)
	if err := util.LoadConfig(envPrefix, option); err != nil {
		log.Fatal(err)
	}

	logger, err := logging.NewLogger(&logging.LoggerConfig{
		FilePath: option.Logging.FilePath,
		Level:    option.Logging.Level,
	})
	if err != nil {
		log.Fatalf("failed to create logger: %s\n", err)
	}
	defer logger.Sync()

	dbConn, err := db.NewSqlxDB(&db.SqlDBConfig{
		Dsn:     option.Database.Dsn,
		MaxConn: option.Database.MaxConn,
		Driver:  option.Database.Driver,
		Debug:   strings.ToLower(option.Logging.Level) == "debug",
	}, logger)
	if err != nil {
		log.Fatalf("failed to create DB connection: %s\n", err)
	}
	logger.Debug("create database instance", zap.String("db.driver", option.Database.Driver),
		zap.String("db.dsn", option.Database.Dsn),
	)

	server := newHttpServer(option, dbConn, logger)

	util.OnExit(10*time.Second, func(ctx context.Context) {
		logger.Sync()
		dbConn.Close(ctx)
		if err := server.Shutdown(ctx); err != nil {
			log.Fatal(err)
		}
	})
}

// Http create http transport server
func newHttpServer(
	option *AppConfig,
	conn *db.SqlxDB,
	logger *zap.Logger,
) *echo.Echo {
	var app = echo.New()

	if option.Env == gobit.EnvDevelop {
		api.RegisterProfileEndpoints(app)
		app.Use(middleware.Logging(logger, middleware.LoggingConfig{
			Skipper: func(e echo.Context) bool {
				return strings.HasPrefix(e.Request().RequestURI, "/healthz")
			},
		}))
	}

	api.CreateEndpoint(app,
		&api.Endpoint{
			Prefix: "api",
			Middlewares: []echo.MiddlewareFunc{
				middleware.ErrorHandling(logger, middleware.ErrorHandlingOption{StackDepth: 3}),
				echo_middleware.Secure(),
				echo_middleware.RequestID(),
				middleware.ParseAcceptLanguage([]language.Tag{
					language.English,
					language.Chinese,
				}),
			},
			Groups: []*api.ApiGroup{
				{
					Prefix: "",
					Routes: []*api.Route{},
				},
			},
		})

	api.PrintRoutes(app, logger)
	go func() {
		if err := app.Start(fmt.Sprintf("%s:%d", option.Host, option.Port)); err != nil {
			log.Fatal(err)
		}
	}()
	return app
}
{% endfunc %}

{% func GoBackendConfig(projectName string) -%}
package cmd

import (
	"runtime"

	gobit "github.com/pot-code/gobit/pkg"
	"github.com/spf13/pflag"
)

// AppConfig App option object
type AppConfig struct {
	AppID    string `mapstructure:"app_id" yaml:"app_id" validate:"required"`           // Application ID
	Host     string `mapstructure:"host" yaml:"host"`                                   // bind host address
	Port     int    `mapstructure:"port" yaml:"port"`                                   // bind listen port
	Env      string `mapstructure:"env" yaml:"env" validate:"oneof=develop production"` // runtime environment
	Database struct {
		Driver  string `mapstructure:"driver" yaml:"driver" validate:"required"` // driver name
		Dsn     string `mapstructure:"dsn" yaml:"dsn" validate:"required"`       // dsn string
		MaxConn int32  `mapstructure:"maxconn" yaml:"maxconn" validate:"min=1"`  // maximum opening connections number
	} `mapstructure:"database" yaml:"database"`
	Logging struct {
		FilePath string `mapstructure:"file_path" yaml:"file_path"`                                // log file path
		Level    string `mapstructure:"level" yaml:"level" validate:"oneof=debug info warn error"` // global logging level
	} `mapstructure:"logging" yaml:"logging"`
}

func init() {
	// common
	pflag.String("host", "", "binding address")
	pflag.String("app_id", "{%s projectName %}", "application identifier (required)")
	pflag.String("env", gobit.EnvDevelop, "runtime environment, can be 'develop' or 'production'")
	pflag.Int("port", 8081, "listening port")

	// database
	pflag.String("database.driver", "pgx", "database driver to use")
	pflag.String("database.dsn", "postgres://postgres:test@127.0.0.1:5432/notification", "database host")
	pflag.Int32("database.maxconn", int32(runtime.NumCPU()), `max connection count, if you encounter a "too many connections" error, please consider
	increasing the max_connection value of your db server, or lower this value`)

	// logging
	pflag.String("logging.level", "info", "logging level")
	pflag.String("logging.file_path", "", "log to file")
}
{% endfunc %}

{% func GoBackendMain(projectName string, author string) -%}
package main

import "github.com/{%s author %}/{%s projectName %}/cmd"

// EnvPrefix env prefix for viper, injected by build flags
var EnvPrefix string

func main() {
	cmd.Http(EnvPrefix)
}
{% endfunc %}

{% func GoBackendMod(projectName string, author string, version string) -%}
module github.com/{%s author %}/{%s projectName %}

go {%s version %}

require (
)
{% endfunc %}