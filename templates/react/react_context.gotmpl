import { createContext, useContext, useMemo } from 'react'

interface {{.name}}ProviderContextState {}

const Context = createContext<{{.name}}ProviderContextState | null>(null)

interface {{.name}}ProviderProps {}

export function {{.name}}Provider({}: {{.name}}ProviderProps) {
  const value = useMemo(() => ({}), [])
  return <Context.Provider value={value}>{children}</Context.Provider>
}

export function use{{.name}}() {
  const context = useContext(Context)

  if (!context) {
    throw new Error('use{{.name}} must be used within a {{.name}}Provider')
  }

  return context
}
