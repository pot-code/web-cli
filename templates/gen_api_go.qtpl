{% func GoApiModel(pkg, model string) -%}
package {%v pkg %}

type {%v model %}UseCase interface {
}

type {%v model %}Repository interface {
}
{% endfunc %}

{% func GoApiRepo(pkg, model string) -%}
package {%v pkg %}

type {%v model %}Store struct {
}

var _ {%v model %}Repository = &{%v model %}Store{}

func New{%v model %}Repository() *{%v model %}Store {
	return &{%v model %}Store{}
}
{% endfunc %}

{% func GoApiService(pkg, model string) -%}
package {%v pkg %}

import (
	"go.uber.org/zap"
)

type {%v model %}Service struct {
	{%v model %}Repository {%v model %}Repository
	logger *zap.Logger
}

var _ {%v model %}UseCase = &{%v model %}Service{}

func New{%v model %}Service(repo {%v model %}Repository, logger *zap.Logger) *{%v model %}Service {
	return &{%v model %}Service{repo, logger.With(zap.String("context", "{%v model %}Service"))}
}
{% endfunc %}

{% func GoApiHandler(pn, author, pkg, model string) -%}
package server

import "github.com/{%s author %}/{%s pn %}/{%s pkg %}"

type {%v model %}Handler struct {
	svc 	{%s pkg %}.{%v model %}UseCase
	repo  {%s pkg %}.{%v model %}Repository
}

func New{%v model %}Handler(
	svc  {%s pkg %}.{%v model %}UseCase,
	repo {%s pkg %}.{%v model %}Repository,
) *{%v model %}Handler {
	handler := &{%v model %}Handler{svc, repo}
	return handler
}
{% endfunc %}