{% func GoApiModel(pkg, model string) -%}
package {%v pkg %}

import (
	"context"
)

type {%v model %} struct {
}

type {%v model %}UseCase interface {
}

type {%v model %}Repository interface {
	Save{%v model %}(ctx context.Context, entity *{%v model %}) error
	Update{%v model %}Status(ctx context.Context, id string, status int) error
	Get{%v model %}ById(ctx context.Context, id string) (*{%v model %}, error)
}
{% endfunc %}

{% func GoApiRepo(pkg, model string) -%}
package {%v pkg %}

import (
	"context"
)

type {%v model %}Store struct {
}

var _ {%v model %}Repository = &{%v model %}Store{}

func New{%v model %}Repository() *{%v model %}Store {
	return &{%v model %}Store{}
}

func (repo {%v model %}Store) Save{%v model %}(ctx context.Context, entity *{%v model %}) error {
	panic("not implemented")
}

func (repo {%v model %}Store) Update{%v model %}Status(ctx context.Context, id string, status int) error {
	panic("not implemented")
}

func (repo {%v model %}Store) Get{%v model %}ById(ctx context.Context, id string) (*{%v model %}, error) {
	panic("not implemented")
}
{% endfunc %}

{% func GoApiService(pkg, model string) -%}
package {%v pkg %}

import (
	"go.uber.org/zap"
)

type {%v model %}Service struct {
	{%v model %}Repository {%v model %}Repository
	logger *zap.Logger
}

var _ {%v model %}UseCase = &{%v model %}Service{}

func New{%v model %}Service(repo {%v model %}Repository, logger *zap.Logger) *{%v model %}Service {
	return &{%v model %}Service{repo, logger.With(zap.String("event.module", "{%v model %}Service"))}
}
{% endfunc %}

{% func GoApiHttp(project, author, pkg, model string) -%}
package {%v pkg %}

type {%v model %}Handler struct {
	svc 	{%v model %}UseCase
	repo  {%v model %}Repository
}

func New{%v model %}Handler(
	svc  {%v model %}UseCase,
	repo {%v model %}Repository,
) *{%v model %}Handler {
	handler := &{%v model %}Handler{svc, repo}
	return handler
}
{% endfunc %}

{% func GoApiWire(pkg, model string) -%}
//+build wireinject

package {%v pkg %}

import (
	"github.com/google/wire"
	"go.uber.org/zap"
)

func Initialize{%v model %}Handler(cfg *bootstrap.AppConfig) *{%v model %}Handler {
	wire.Build(
		New{%v model %}Handler, New{%v model %}Service, New{%v model %}Repository,
		bootstrap.NewDB, bootstrap.NewLogger,
		wire.Bind(new({%v model %}Repository), new(*{%v model %}Store)),
		wire.Bind(new({%v model %}UseCase), new(*{%v model %}Service)),
	)
	return &{%v model %}Handler{}
}
{% endfunc %}