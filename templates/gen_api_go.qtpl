{% func GoApiModel(pkg, svc, repo string) -%}
package {%v pkg %}

import "github.com/google/wire"

type I{%s svc %} interface {
}

type I{%s repo %} interface {
}

var WireSet = wire.NewSet(
	New{%s svc %}, New{%s repo %},
	wire.Bind(new(I{%s svc %}), new(*{%s svc %})),
	wire.Bind(new(I{%s repo %}), new(*{%s repo %})),
)
{% endfunc %}

{% func GoApiRepo(pkg, repo string) -%}
package {%s pkg %}

type {%s repo %} struct {
}

var _ I{%s repo %} = &{%s repo %}{}

func New{%s repo %}() *{%s repo %} {
	return &{%s repo %}{}
}
{% endfunc %}

{% func GoApiService(pkg, svc, repo string) -%}
package {%v pkg %}

import (
	"go.uber.org/zap"
)

type {%s svc %} struct {
	repo   I{%s repo %}
	logger *zap.Logger
}

var _ I{%s svc %} = &{%s svc %}{}

func New{%s svc %}(repo I{%s repo %}, logger *zap.Logger) *{%s svc %} {
	return &{%s svc %}{repo, logger.With(zap.String("context", "{%s svc %}"))}
}
{% endfunc %}

{% func GoApiHandler(project, author, pkg, svc, handler string) -%}
package server

import "github.com/{%s author %}/{%s project %}/{%s pkg %}"

type {%s handler %} struct {
	svc {%s pkg %}.I{%s svc %}
}

func New{%s handler %}(
	svc {%s pkg %}.I{%s svc %},
) *{%s handler %} {
	return &{%s handler %}{svc}
}
{% endfunc %}