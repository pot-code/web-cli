{% func GoServiceDomainType(svc, repo string) -%}
package domain

type I{%s svc %} interface {}

type I{%s repo %} interface {}
{% endfunc %}

{% func GoServiceWireSet(project, author, pkg, handler, svc, repo string) -%}
package {%s pkg %}

import (
	"github.com/google/wire"
	"github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/domain"
	"github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/port"
	repo "github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/repository"
	"github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/service"
)

var HttpSet = wire.NewSet(
	wire.Bind(new(domain.I{%s svc %}), new(*service.{%s svc %})),
	wire.Bind(new(domain.I{%s repo %}), new(*repo.{%s repo %})),
	service.New{%s svc %},
	repo.New{%s repo %},
	port.New{%s handler %},
)
{% endfunc %}

{% func GoServiceDomainModel(model string) -%}
package domain

type {%s model %} struct {}
{% endfunc %}

{% func GoServiceRepo(project, author, pkg, repo string) -%}
package repo

import (
	"github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/domain"
)

type {%s repo %} struct {}

var _ domain.I{%s repo %} = &{%s repo %}{}

func New{%s repo %}() *{%s repo %} {
	return &{%s repo %}{}
}
{% endfunc %}

{% func GoServiceService(project, author, pkg, svc, repo string) -%}
package service

import (
	"github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/domain"
	"go.uber.org/zap"
)

type {%s svc %} struct {
	repo   domain.I{%s repo %}
	logger *zap.Logger
}

var _ domain.I{%s svc %} = &{%s svc %}{}

func New{%s svc %}(repo domain.I{%s repo %}, logger *zap.Logger) *{%s svc %} {
	return &{%s svc %}{repo, logger.With(zap.String("context", "{%s svc %}"))}
}
{% endfunc %}

{% func GoServiceWebHandler(project, author, pkg, svc, handler string) -%}
package port

import (
	"github.com/{%s author %}/{%s project %}/internal/{%s pkg %}/domain"
)

type {%s handler %} struct {
	svc domain.I{%s svc %}
}

func New{%s handler %}(
	svc domain.I{%s svc %},
) *{%s handler %} {
	return &{%s handler %}{svc}
}
{% endfunc %}